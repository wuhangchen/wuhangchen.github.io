<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴杭沉的博客</title>
  
  <subtitle>小吴同学</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="localhost/"/>
  <updated>2024-10-08T13:45:37.206Z</updated>
  <id>localhost/</id>
  
  <author>
    <name>吴杭沉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内存分配malloc</title>
    <link href="localhost/2024/10/08/thirtyseven/"/>
    <id>localhost/2024/10/08/thirtyseven/</id>
    <published>2024-10-08T13:25:39.000Z</published>
    <updated>2024-10-08T13:45:37.206Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;下面的代码片段输出是什么？为什么？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;char *ptr;
if((ptr = (char *)malloc(0)) == NULL)
    puts(&amp;quot;Got a null pointer&amp;quot;);
else
   
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++成员修饰const和mutable</title>
    <link href="localhost/2024/09/28/thirtysex/"/>
    <id>localhost/2024/09/28/thirtysex/</id>
    <published>2024-09-28T10:07:45.000Z</published>
    <updated>2024-09-28T11:35:57.183Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;code&gt;const&lt;/code&gt;：常量，不变的&lt;br&gt;&lt;code&gt;mutable&lt;/code&gt;：易变的&lt;br&gt;从意思上理解，可见&lt;code&gt;const&lt;/code&gt;和&lt;code&gt;mutable&lt;/code&gt;是一对反义词，它们都是C++的关键字。&lt;br&gt;&lt;code&gt;con
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>使用++i还是i++</title>
    <link href="localhost/2024/09/25/thirtyfive/"/>
    <id>localhost/2024/09/25/thirtyfive/</id>
    <published>2024-09-25T14:47:51.000Z</published>
    <updated>2024-09-25T14:52:22.520Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;我们经常使用&lt;code&gt;for&lt;/code&gt;循环来遍历东西，循环变量可以前自增也可以后自增，发现对遍历结果没啥影响，但是该如何选择呢？&lt;br&gt;我们应该尽量使用前自增运算符而不是后自增运算符，即用
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++面试题</title>
    <link href="localhost/2024/09/23/thirtyfour/"/>
    <id>localhost/2024/09/23/thirtyfour/</id>
    <published>2024-09-23T14:37:51.000Z</published>
    <updated>2024-09-28T10:00:33.873Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;1.&lt;code&gt;char c = &amp;#39;\72&amp;#39;&lt;/code&gt;;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++细说sizeof</title>
    <link href="localhost/2024/09/08/thirythree/"/>
    <id>localhost/2024/09/08/thirythree/</id>
    <published>2024-09-08T09:46:14.000Z</published>
    <updated>2024-09-23T14:36:37.485Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;摘要：&quot;&gt;&lt;a href=&quot;#摘要：&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++中new与malloc区别</title>
    <link href="localhost/2024/09/08/thirytwo/"/>
    <id>localhost/2024/09/08/thirytwo/</id>
    <published>2024-09-08T07:54:23.000Z</published>
    <updated>2024-09-08T08:56:52.887Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;申请的内存所在位置&quot;&gt;&lt;a href=&quot;#申请的内存所在位置&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 流缓冲区</title>
    <link href="localhost/2024/09/04/thirtyone-1/"/>
    <id>localhost/2024/09/04/thirtyone-1/</id>
    <published>2024-09-04T13:51:46.000Z</published>
    <updated>2024-09-11T14:05:56.273Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;C++ 的 I/O 是通过标准库中输入输出流来实现的。标准库在 &lt;code&gt;iostream&lt;/code&gt;头文件当中，预定义了六个流对象，他们是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;• istream &amp;lt;-
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++命令行参数</title>
    <link href="localhost/2024/09/03/thirtyone/"/>
    <id>localhost/2024/09/03/thirtyone/</id>
    <published>2024-09-03T13:41:24.000Z</published>
    <updated>2024-09-03T14:01:31.463Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>std::ref</title>
    <link href="localhost/2024/09/03/thirty/"/>
    <id>localhost/2024/09/03/thirty/</id>
    <published>2024-09-03T13:22:35.000Z</published>
    <updated>2024-09-04T13:50:06.385Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;C++本身有引用&amp;amp;，为什么C++11又引入了&lt;code&gt;std::ref&lt;/code&gt;?&lt;br&gt;主要是考虑函数式编程如&lt;code&gt;std::bind&lt;/code&gt;在使用时，是对参数直接拷贝，而不是引用。如下例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>friend</title>
    <link href="localhost/2024/09/03/twentynine/"/>
    <id>localhost/2024/09/03/twentynine/</id>
    <published>2024-09-03T12:49:25.000Z</published>
    <updated>2024-09-03T13:21:51.823Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;原则上, 类的私有（private）和受保护（protected）成员不能从声明它们的同一类外部访问。但是, 此规则不适用于友元 “friends”。以friend关键字修饰的函数或类称为友元函数或友元类。&lt;/p&gt;
&lt;h1 id=&quot;友元函数&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>拷贝构造函数与赋值函数</title>
    <link href="localhost/2024/09/03/twentyeight/"/>
    <id>localhost/2024/09/03/twentyeight/</id>
    <published>2024-09-03T12:33:26.000Z</published>
    <updated>2024-09-03T12:46:09.453Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在进行C++类编写的过程之中，通常会涉及到类的拷贝构造函数与类的赋值函数。初涉类编写的代码，对于两类函数的用法一直是挺让人困惑的内容。这篇文章我们会详细来梳理拷贝构造函数与赋值函数的区别。&lt;/p&gt;
&lt;h1 id=&quot;调用了哪个函数？&quot;&gt;&lt;a href=&quot;#调用了哪个函数？&quot;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>智能指针</title>
    <link href="localhost/2024/09/02/twentyseven/"/>
    <id>localhost/2024/09/02/twentyseven/</id>
    <published>2024-09-02T14:12:49.000Z</published>
    <updated>2024-09-08T05:00:31.130Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;上周五排查了一个由于XXX模块操作疏忽导致栈越界引发的我的模块的智能指针Crash问题，因此稍微研究了一下，以作参考：&lt;br&gt;&lt;code&gt;shared_ptr&lt;/code&gt;共享被管理对象，同一时刻可以有多个&lt;code&gt;shared_ptr&lt;/code&gt;拥有对象的所有权，当最
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>右值引用</title>
    <link href="localhost/2024/09/02/twentysix/"/>
    <id>localhost/2024/09/02/twentysix/</id>
    <published>2024-09-02T13:30:10.000Z</published>
    <updated>2024-09-02T14:04:05.953Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>sizeof、strlen、数组、字符串</title>
    <link href="localhost/2024/08/27/twentyfive/"/>
    <id>localhost/2024/08/27/twentyfive/</id>
    <published>2024-08-27T14:15:57.000Z</published>
    <updated>2024-09-02T13:25:32.433Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;对于初学者来说，sizeof，strlen，数组，字符串整在一起是痛苦的，它总能在某些莫名其妙的时候整一个措手不及,本文看看它们在一起能挖什么坑。&lt;/p&gt;
&lt;h1 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>二维数组</title>
    <link href="localhost/2024/08/26/twentyfour/"/>
    <id>localhost/2024/08/26/twentyfour/</id>
    <published>2024-08-26T13:22:26.000Z</published>
    <updated>2024-08-27T13:31:10.864Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;二维数组&quot;&gt;&lt;a href=&quot;#二维数组&quot; class=&quot;headerlink&quot; title=&quot;二维数组&quot;&gt;&lt;/a&gt;二维数组&lt;/h1&gt;&lt;p&gt;我们知道 C
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="localhost/2024/08/14/twentythree/"/>
    <id>localhost/2024/08/14/twentythree/</id>
    <published>2024-08-14T15:18:08.000Z</published>
    <updated>2024-08-27T13:47:28.364Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在C语言中，数组和指针似乎总是“暧昧不清”，有时候很容易把它们混淆。本文就来理一理数组和指针之间到底有哪些异同。&lt;/p&gt;
&lt;h1
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>语言链接</title>
    <link href="localhost/2024/08/14/twentytwo/"/>
    <id>localhost/2024/08/14/twentytwo/</id>
    <published>2024-08-14T14:45:28.000Z</published>
    <updated>2024-08-27T13:54:22.984Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;提供以不同程序语言编写的模块间的连接。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extern 字符串字面量 { 声明序列(可选) }     (1)
extern 字符串字面量 声明     (2)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1)
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>枚举申明</title>
    <link href="localhost/2024/08/04/twentyone/"/>
    <id>localhost/2024/08/04/twentyone/</id>
    <published>2024-08-04T08:53:01.000Z</published>
    <updated>2024-08-27T14:07:42.464Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;枚举（enumeration）是独立的类型，其值限制在一个取值范围内（细节见下文），它可以包含数个明确命名的常量（“枚举项（enumerator）”）。&lt;br&gt;各常量的值是某个整型类型（称为该枚举的底层类型（underlying
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>指针</title>
    <link href="localhost/2024/07/30/twenty/"/>
    <id>localhost/2024/07/30/twenty/</id>
    <published>2024-07-30T13:20:11.000Z</published>
    <updated>2024-08-27T14:14:21.154Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;声明指针或指向成员指针类型的变量。&lt;/p&gt;
&lt;h1 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h1&gt;&lt;p&gt;指针的声明是简单声明，其声明符拥有下列形式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 引用</title>
    <link href="localhost/2024/07/30/nineteen/"/>
    <id>localhost/2024/07/30/nineteen/</id>
    <published>2024-07-30T12:45:22.000Z</published>
    <updated>2024-08-25T14:44:59.349Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;声明具名变量为引用，即既存对象或函数的别名。&lt;br&gt;引用变量声明是声明符拥有下列形式的简单声明&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp; attr(可选) 声明符     (1)
&amp;amp;&amp;amp; attr(可选) 声明符     (2)     (C++11
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
</feed>

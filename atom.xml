<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴杭沉的博客</title>
  
  <subtitle>小吴同学</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="localhost/"/>
  <updated>2024-08-14T14:42:32.930Z</updated>
  <id>localhost/</id>
  
  <author>
    <name>吴杭沉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>枚举申明</title>
    <link href="localhost/2024/08/04/twentyone/"/>
    <id>localhost/2024/08/04/twentyone/</id>
    <published>2024-08-04T08:53:01.000Z</published>
    <updated>2024-08-14T14:42:32.930Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;枚举（enumeration）是独立的类型，其值限制在一个取值范围内（细节见下文），它可以包含数个明确命名的常量（“枚举项（enumerator）”）。&lt;br&gt;各常量的值是某个整型类型（称为该枚举的底层类型（underlying
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>指针</title>
    <link href="localhost/2024/07/30/twenty/"/>
    <id>localhost/2024/07/30/twenty/</id>
    <published>2024-07-30T13:20:11.000Z</published>
    <updated>2024-08-04T08:44:21.605Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;声明指针或指向成员指针类型的变量。&lt;/p&gt;
&lt;h1 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h1&gt;&lt;p&gt;指针的声明是简单声明，其声明符拥有下列形式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 引用</title>
    <link href="localhost/2024/07/30/nineteen/"/>
    <id>localhost/2024/07/30/nineteen/</id>
    <published>2024-07-30T12:45:22.000Z</published>
    <updated>2024-07-30T13:12:25.716Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;声明具名变量为引用，即既存对象或函数的别名。&lt;br&gt;引用变量声明是声明符拥有下列形式的简单声明&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp; attr(可选) 声明符     (1)
&amp;amp;&amp;amp; attr(可选) 声明符     (2)     (C++11
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux dd命令</title>
    <link href="localhost/2024/07/30/eighteen/"/>
    <id>localhost/2024/07/30/eighteen/</id>
    <published>2024-07-30T12:22:58.000Z</published>
    <updated>2024-07-30T12:45:02.746Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;dd 命令用于复制文件并对原文件的内容进行转换和格式化处理&lt;br&gt;语法格式&lt;br&gt;dd [OPTIONS]…&lt;br&gt;选项说明&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if=文件名   #指定源文件。
of=文件名   #指定目的文件。
ibs=bytes 
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 技巧</title>
    <link href="localhost/2024/07/29/seventeen/"/>
    <id>localhost/2024/07/29/seventeen/</id>
    <published>2024-07-29T13:07:20.000Z</published>
    <updated>2024-07-29T13:33:13.712Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;如果要谨慎使用 rm 命令，可以为它设置一个别名，在删除文件之前需要进行确认才能删除。有些系统管理员会默认使用这个别名，&lt;br&gt;对于这种情况，你可能需要看看下一个技巧。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rm -i    &amp;lt;==
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux inode资源耗尽问题</title>
    <link href="localhost/2024/07/29/sixteen/"/>
    <id>localhost/2024/07/29/sixteen/</id>
    <published>2024-07-29T12:57:32.000Z</published>
    <updated>2024-07-29T13:44:14.862Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Linux系统下文件数据储存在”块”中，文件的元信息，例如文件的创建者、文件的创建日期、文件的大小等。&lt;br&gt;这种储存文件元信息的区域就叫做inode，中文译名为”索引节点”。&lt;br&gt;inode也占用硬盘空间，硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux grep 文本查找</title>
    <link href="localhost/2024/07/29/fifteen/"/>
    <id>localhost/2024/07/29/fifteen/</id>
    <published>2024-07-29T12:12:04.000Z</published>
    <updated>2024-07-29T12:57:07.862Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;之前介绍过很多linux下查找相关的命令，而对文件内容搜索的命令似乎还没有涉及，因此本文介绍文本搜索命令–grep。&lt;br&gt;常见用法&lt;br&gt;我们会经常结合管道符（|）来使用它，即在前面命令执行的结果中查找包含相关字符串的内容。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ps
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 10个危险的命令</title>
    <link href="localhost/2024/07/28/fourteen/"/>
    <id>localhost/2024/07/28/fourteen/</id>
    <published>2024-07-28T13:08:55.000Z</published>
    <updated>2024-07-28T13:21:48.981Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Linux命令行佷有用、很高效，也很有趣，但有时候也很危险，尤其是在你不确定你自己在正在做什么时候。&lt;br&gt;这篇文章将会向你介绍十条命令，但你最好不要尝试着去使用。&lt;br&gt;当然，以下命令通常都是在root权限下才能将愚蠢发挥到无可救药；在普通用户身份下，破坏的只是自己的一亩
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell一些快捷键</title>
    <link href="localhost/2024/07/28/thirteen/"/>
    <id>localhost/2024/07/28/thirteen/</id>
    <published>2024-07-28T13:06:35.000Z</published>
    <updated>2024-07-28T13:08:27.051Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;ctrl+a:光标移到行首。&lt;br&gt;ctrl+e:光标移到行尾。&lt;br&gt;ctrl+b:光标左移一个字母, 向行首移动一个字符&lt;br&gt;ctrl+f:光标右移,向行尾移动一个字符&lt;br&gt;ctrl+c:杀死当前进程。&lt;br&gt;ctrl+d:退出当前
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux history 显示命令执行的时间</title>
    <link href="localhost/2024/07/28/twleve/"/>
    <id>localhost/2024/07/28/twleve/</id>
    <published>2024-07-28T12:40:53.000Z</published>
    <updated>2024-07-28T12:42:43.091Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;显示历史命令之行时间&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;export HISTTIMEFORMAT=&amp;quot;%F %T  &amp;quot;&amp;quot; &amp;gt;&amp;gt;
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 删除大量文件效率对比</title>
    <link href="localhost/2024/07/24/eleven/"/>
    <id>localhost/2024/07/24/eleven/</id>
    <published>2024-07-24T12:48:03.000Z</published>
    <updated>2024-07-24T13:08:58.719Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;首先建立50万个文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i in $(seq 1 500000);do echo text &amp;gt;&amp;gt;$i.txt;done&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;rm删除&quot;&gt;&lt;a href=&quot;#rm删除&quot;
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统查找大文件</title>
    <link href="localhost/2024/07/24/ten/"/>
    <id>localhost/2024/07/24/ten/</id>
    <published>2024-07-24T12:32:53.000Z</published>
    <updated>2024-07-24T12:46:10.249Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在Windows系统中，我们可以使用TreeSize工具查找一些大文件或文件夹，非常的方便高效，在Linux系统中，&lt;br&gt;如何去搜索一些比较大的文件呢？下面我整理了一下在Linux系统中如何查找大文件或文件夹的方法。&lt;/p&gt;
&lt;h1 id=&quot;如何查找大文件？&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 终端诡异家伙</title>
    <link href="localhost/2024/07/24/nine/"/>
    <id>localhost/2024/07/24/nine/</id>
    <published>2024-07-24T12:21:42.000Z</published>
    <updated>2024-07-24T12:32:41.499Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;这篇文章，我们一起来到 Linux 的诡异的一面……你知道吗？在我们日常使用的 Unix（和 Linux ）及其各种各样的分支系统中，&lt;br&gt;存在着一些诡异的命令或进程，它们让人毛骨悚然，有些确实是有害，但也有些却是有益的。下面就来简单介绍一下这些家伙吧。&lt;/p&gt;
&lt;h1
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux Make 三连</title>
    <link href="localhost/2024/07/24/eight/"/>
    <id>localhost/2024/07/24/eight/</id>
    <published>2024-07-24T12:16:57.000Z</published>
    <updated>2024-07-28T13:54:20.181Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Unix 开发过程中，经常性的操作是从源码编译安装相应库文件，所以下面三个命令便是家常便饭，俗称三连：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./configure
make
make install&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面来看看这三步分别做了什么。&lt;/p&gt;
&lt;h1
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 完全卸载一个软件包</title>
    <link href="localhost/2024/07/23/six/"/>
    <id>localhost/2024/07/23/six/</id>
    <published>2024-07-23T13:57:51.000Z</published>
    <updated>2024-07-23T14:00:02.880Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;今天卸载一个软件，老是有配置残留，网上找到了解决方案：&lt;br&gt;查看已安装的软件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dpkg -l |grep 软件名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;找到一大堆相关的包，然后卸载核心的包：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令行神器推荐</title>
    <link href="localhost/2024/07/23/five/"/>
    <id>localhost/2024/07/23/five/</id>
    <published>2024-07-23T13:48:40.000Z</published>
    <updated>2024-07-28T12:21:38.031Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;• ag：比grep、ack更快的递归搜索文件内容。&lt;br&gt;• jq: json文件处理以及格式化显示，支持高亮，可以替换python -m json.tool。&lt;br&gt;• ncdu：可视化的空间分析程序&lt;br&gt;你发现有人把 /home
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux shell变量含义</title>
    <link href="localhost/2024/07/23/four/"/>
    <id>localhost/2024/07/23/four/</id>
    <published>2024-07-23T13:41:30.000Z</published>
    <updated>2024-07-23T13:48:27.380Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;$$               Shell本身的PID（ProcessID）&lt;br&gt;$!               Shell最后运行的后台Process的PID&lt;br&gt;$?               最后运行的命令的结束代码（返回值）&lt;br&gt;$-         
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统目录结构</title>
    <link href="localhost/2024/07/20/three/"/>
    <id>localhost/2024/07/20/three/</id>
    <published>2024-07-20T09:51:06.000Z</published>
    <updated>2024-07-20T11:25:35.059Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;/bin  经常使用的指令&lt;br&gt;/boot 启动linux的核心文件&lt;br&gt;/dev  外部设备&lt;br&gt;/etc  系统管理配置文件和子目录&lt;br&gt;/home  自己的目录&lt;br&gt;/lib  共享动态链接库&lt;br&gt;/lost+found 
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 网络工具</title>
    <link href="localhost/2024/06/29/second/"/>
    <id>localhost/2024/06/29/second/</id>
    <published>2024-06-29T23:30:41.000Z</published>
    <updated>2024-07-23T13:40:33.360Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;如果要在你的系统上监控网络，那么使用命令行工具是非常实用的，并且对于 Linux 用户来说，有着许许多多现成的工具可以使用，&lt;br&gt;如： nethogs, ntopng, nload, iftop, iptraf, bmon, slurm,&lt;br&gt;tcptrack,
        
      
    
    </summary>
    
      <category term="Linux" scheme="localhost/categories/Linux/"/>
    
    
      <category term="Linux" scheme="localhost/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>随想</title>
    <link href="localhost/2023/11/10/first/"/>
    <id>localhost/2023/11/10/first/</id>
    <published>2023-11-10T15:27:31.000Z</published>
    <updated>2024-07-24T12:25:47.229Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;灵魂困于方寸之地,
        
      
    
    </summary>
    
      <category term="thinking" scheme="localhost/categories/thinking/"/>
    
    
      <category term="thinking" scheme="localhost/tags/thinking/"/>
    
  </entry>
  
</feed>

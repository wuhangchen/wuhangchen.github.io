<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴杭沉的博客</title>
  
  <subtitle>小吴同学</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="localhost/"/>
  <updated>2025-04-21T13:50:09.161Z</updated>
  <id>localhost/</id>
  
  <author>
    <name>吴杭沉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++面试</title>
    <link href="localhost/2024/11/09/fortyfive/"/>
    <id>localhost/2024/11/09/fortyfive/</id>
    <published>2024-11-09T07:32:12.000Z</published>
    <updated>2025-04-21T13:50:09.161Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;1.&lt;code&gt;char char =
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>右值引用</title>
    <link href="localhost/2024/11/03/fortyfour/"/>
    <id>localhost/2024/11/03/fortyfour/</id>
    <published>2024-11-03T05:36:56.000Z</published>
    <updated>2025-04-21T14:00:17.441Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++工程实践</title>
    <link href="localhost/2024/10/30/fortythree/"/>
    <id>localhost/2024/10/30/fortythree/</id>
    <published>2024-10-30T12:45:13.000Z</published>
    <updated>2024-10-30T13:18:37.777Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;什么是值语义&quot;&gt;&lt;a href=&quot;#什么是值语义&quot; class=&quot;headerlink&quot; title=&quot;什么是值语义&quot;&gt;&lt;/a&gt;什么是值语义&lt;/h2&gt;&lt;p&gt;值语义指的是对象的拷贝与原对象无关，就像拷贝 &lt;code&gt;int&lt;/code&gt;一样。C++
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 静态库与动态库</title>
    <link href="localhost/2024/10/29/fortytwo/"/>
    <id>localhost/2024/10/29/fortytwo/</id>
    <published>2024-10-29T13:21:55.000Z</published>
    <updated>2024-10-30T12:42:37.907Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;这次分享的宗旨是——让大家学会创建与使用静态库、动态库，知道静态库与动态库的区别，知道使用的时候如何选择。这里不深入介绍静态库、动态库的底层格式，内存布局等，有兴趣的同学，推荐一本书《程序员的自我修养——链接、装载与库》。&lt;br&gt;库是写好的现有的，成熟的，可以复用的代码。现
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++对象模型：对象内存布局详解</title>
    <link href="localhost/2024/10/13/fortyone/"/>
    <id>localhost/2024/10/13/fortyone/</id>
    <published>2024-10-13T09:41:08.000Z</published>
    <updated>2025-04-21T14:23:25.087Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章希望对C++对象的内存布局、虚表指针、虚基类指针等有深入介绍。&lt;/p&gt;
&lt;h2 id=&quot;何为C-对象模型&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++整型变量赋值操作是原子性的吗？</title>
    <link href="localhost/2024/10/13/forty/"/>
    <id>localhost/2024/10/13/forty/</id>
    <published>2024-10-13T09:23:32.000Z</published>
    <updated>2025-04-21T13:40:31.911Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;那么为什么整型变量的操作不是原子性的呢？常见的整型变量操作有如下几种情况：&lt;br&gt;给整型变量赋值一个确定的值，如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int a =
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>so出现undefined symbol------ldd, nm, c++filt</title>
    <link href="localhost/2024/10/08/thirtynine/"/>
    <id>localhost/2024/10/08/thirtynine/</id>
    <published>2024-10-08T13:51:15.000Z</published>
    <updated>2024-11-03T04:02:23.657Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近发版本，灰度发布的时候，发现进程没起来，回包自然是异常的。立即进行版本回退，发现OK.&lt;br&gt;哪里出问题了呢？ 直接&lt;code&gt;ldd -r
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Lambda 表达式捕获列表</title>
    <link href="localhost/2024/10/08/thirtyeight/"/>
    <id>localhost/2024/10/08/thirtyeight/</id>
    <published>2024-10-08T13:47:07.000Z</published>
    <updated>2024-10-08T13:50:20.816Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;捕获值列表，是允许我们在Lambda表达式的函数体中直接使用这些值，捕获值列表能捕获的值是所有在此作用域可以访问的值，包括这个作用域里面的临时变量，类的可访问成员，全局变量。捕获值的方式分两种，一种是按值捕获，一种是按引用捕获。顾名思义，按值捕获是不改变原有变量的值，按引用
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>内存分配malloc</title>
    <link href="localhost/2024/10/08/thirtyseven/"/>
    <id>localhost/2024/10/08/thirtyseven/</id>
    <published>2024-10-08T13:25:39.000Z</published>
    <updated>2024-10-08T13:45:37.206Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;下面的代码片段输出是什么？为什么？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;char *ptr;
if((ptr = (char *)malloc(0)) == NULL)
    puts(&amp;quot;Got a null pointer&amp;quot;);
else
   
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++成员修饰const和mutable</title>
    <link href="localhost/2024/09/28/thirtysex/"/>
    <id>localhost/2024/09/28/thirtysex/</id>
    <published>2024-09-28T10:07:45.000Z</published>
    <updated>2024-09-28T11:35:57.183Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;code&gt;const&lt;/code&gt;：常量，不变的&lt;br&gt;&lt;code&gt;mutable&lt;/code&gt;：易变的&lt;br&gt;从意思上理解，可见&lt;code&gt;const&lt;/code&gt;和&lt;code&gt;mutable&lt;/code&gt;是一对反义词，它们都是C++的关键字。&lt;br&gt;&lt;code&gt;con
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>使用++i还是i++</title>
    <link href="localhost/2024/09/25/thirtyfive/"/>
    <id>localhost/2024/09/25/thirtyfive/</id>
    <published>2024-09-25T14:47:51.000Z</published>
    <updated>2024-09-25T14:52:22.520Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;我们经常使用&lt;code&gt;for&lt;/code&gt;循环来遍历东西，循环变量可以前自增也可以后自增，发现对遍历结果没啥影响，但是该如何选择呢？&lt;br&gt;我们应该尽量使用前自增运算符而不是后自增运算符，即用
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++面试题</title>
    <link href="localhost/2024/09/23/thirtyfour/"/>
    <id>localhost/2024/09/23/thirtyfour/</id>
    <published>2024-09-23T14:37:51.000Z</published>
    <updated>2024-09-28T10:00:33.873Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;1.&lt;code&gt;char c = &amp;#39;\72&amp;#39;&lt;/code&gt;;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++细说sizeof</title>
    <link href="localhost/2024/09/08/thirythree/"/>
    <id>localhost/2024/09/08/thirythree/</id>
    <published>2024-09-08T09:46:14.000Z</published>
    <updated>2024-09-23T14:36:37.485Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;摘要：&quot;&gt;&lt;a href=&quot;#摘要：&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++中new与malloc区别</title>
    <link href="localhost/2024/09/08/thirytwo/"/>
    <id>localhost/2024/09/08/thirytwo/</id>
    <published>2024-09-08T07:54:23.000Z</published>
    <updated>2024-09-08T08:56:52.887Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;申请的内存所在位置&quot;&gt;&lt;a href=&quot;#申请的内存所在位置&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 流缓冲区</title>
    <link href="localhost/2024/09/04/thirtyone-1/"/>
    <id>localhost/2024/09/04/thirtyone-1/</id>
    <published>2024-09-04T13:51:46.000Z</published>
    <updated>2024-09-11T14:05:56.273Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;C++ 的 I/O 是通过标准库中输入输出流来实现的。标准库在 &lt;code&gt;iostream&lt;/code&gt;头文件当中，预定义了六个流对象，他们是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;• istream &amp;lt;-
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++命令行参数</title>
    <link href="localhost/2024/09/03/thirtyone/"/>
    <id>localhost/2024/09/03/thirtyone/</id>
    <published>2024-09-03T13:41:24.000Z</published>
    <updated>2024-09-03T14:01:31.463Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>std::ref</title>
    <link href="localhost/2024/09/03/thirty/"/>
    <id>localhost/2024/09/03/thirty/</id>
    <published>2024-09-03T13:22:35.000Z</published>
    <updated>2024-09-04T13:50:06.385Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;C++本身有引用&amp;amp;，为什么C++11又引入了&lt;code&gt;std::ref&lt;/code&gt;?&lt;br&gt;主要是考虑函数式编程如&lt;code&gt;std::bind&lt;/code&gt;在使用时，是对参数直接拷贝，而不是引用。如下例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>friend</title>
    <link href="localhost/2024/09/03/twentynine/"/>
    <id>localhost/2024/09/03/twentynine/</id>
    <published>2024-09-03T12:49:25.000Z</published>
    <updated>2024-09-03T13:21:51.823Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;原则上, 类的私有（private）和受保护（protected）成员不能从声明它们的同一类外部访问。但是, 此规则不适用于友元 “friends”。以friend关键字修饰的函数或类称为友元函数或友元类。&lt;/p&gt;
&lt;h1 id=&quot;友元函数&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>拷贝构造函数与赋值函数</title>
    <link href="localhost/2024/09/03/twentyeight/"/>
    <id>localhost/2024/09/03/twentyeight/</id>
    <published>2024-09-03T12:33:26.000Z</published>
    <updated>2024-09-03T12:46:09.453Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在进行C++类编写的过程之中，通常会涉及到类的拷贝构造函数与类的赋值函数。初涉类编写的代码，对于两类函数的用法一直是挺让人困惑的内容。这篇文章我们会详细来梳理拷贝构造函数与赋值函数的区别。&lt;/p&gt;
&lt;h1 id=&quot;调用了哪个函数？&quot;&gt;&lt;a href=&quot;#调用了哪个函数？&quot;
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>智能指针</title>
    <link href="localhost/2024/09/02/twentyseven/"/>
    <id>localhost/2024/09/02/twentyseven/</id>
    <published>2024-09-02T14:12:49.000Z</published>
    <updated>2024-09-08T05:00:31.130Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;上周五排查了一个由于XXX模块操作疏忽导致栈越界引发的我的模块的智能指针Crash问题，因此稍微研究了一下，以作参考：&lt;br&gt;&lt;code&gt;shared_ptr&lt;/code&gt;共享被管理对象，同一时刻可以有多个&lt;code&gt;shared_ptr&lt;/code&gt;拥有对象的所有权，当最
        
      
    
    </summary>
    
      <category term="C++" scheme="localhost/categories/C/"/>
    
    
      <category term="C++" scheme="localhost/tags/C/"/>
    
  </entry>
  
</feed>
